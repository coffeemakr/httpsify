package main

import (
	"flag"
	fmt "fmt"
	"github.com/coffeemakr/httpsify/hsts"
	"github.com/coffeemakr/httpsify/httpseverywhere"
	"io"
	"log"
	"os"
	"sort"
)

func writeHostsFile(hosts []string, filename string) error {
	fp, err := os.Create(filename)
	defer fp.Close()
	if err != nil {
		return err
	}
	sort.Strings(hosts)
	for _, host := range hosts {
		fmt.Fprintln(fp, host)
	}
	return nil
}

func writeGoArray(w io.Writer, name string, values []string) {
	sort.Strings(values)
	_, _ = fmt.Fprintf(w, "var %s = []string { ", name)
	for _, name := range values {
		_, _ = fmt.Fprintf(w, " %#v,\n", name)
	}
	_, _ = fmt.Fprintln(w, " }")
}

func main() {
	var rulesPath string
	var hostsFile string
	var subdomainsFile string
	var packageName = "simple"
	var codeFile string
	flag.StringVar(&rulesPath, "https-everywhere-rules", "", "Path to the rules")
	flag.StringVar(&hostsFile, "domains-out", "", "Path to the rules")
	flag.StringVar(&subdomainsFile, "subdomains-out", "", "Path to the rules")
	flag.StringVar(&codeFile, "code-out", "", "Path to the rules")
	flag.Parse()

	log.Println("Loading https everywhere...")
	rules, err := httpseverywhere.Parse(rulesPath)
	if err != nil {
		log.Fatalln(err)
	}
	log.Println("Loading hsts...")
	hstsRules, err := hsts.LoadHstsPreload()
	if err != nil {
		log.Fatalln(err)
	}

	rules.Add(hstsRules)
	hstsRules = nil

	if subdomainsFile != "" {
		err = writeHostsFile(rules.SimpleSubdomainTargets(), subdomainsFile)
		if err != nil {
			log.Fatalln(err)
		}
	}
	if hostsFile != "" {
		err = writeHostsFile(rules.SimpleTargets(), hostsFile)
		if err != nil {
			log.Fatalln(err)
		}
	}

	if codeFile != "" {
		f, err := os.Create(codeFile)
		if err != nil {
			log.Fatalln(err)
		}
		defer f.Close()
		_, _ = fmt.Fprintf(f, `// +build !generate

// Code generated by go run generate.go. DO NOT EDIT.

package %s

import (
	"github.com/coffeemakr/httpsify"
)

var SimpleRules = httpsify.NewRuleCollection()

func init() {
`, packageName)

		writeGoArray(f, "includeSubdomainsNames", rules.SimpleSubdomainTargets())
		writeGoArray(f, "names", rules.SimpleTargets())
		_, _ = fmt.Fprintf(f, `
	SimpleRules.AddSimpleHosts(includeSubdomainsNames, true)
	SimpleRules.AddSimpleHosts(names, false)
}
`)
	}
}
